From 314e5588c3333cf95652c2e6c4b53207d78b8c26 Mon Sep 17 00:00:00 2001
From: Demon000 <demonsingur@gmail.com>
Date: Thu, 21 May 2020 02:06:33 +0300
Subject: [PATCH] drm: msm: sde: Translate zpos property to cust property

Co-authored-by: LuK1337 <priv.luk@gmail.com>
Change-Id: I7e8562ed3eda675d160d6dabee7e568a1a72e849
Signed-off-by: rk134 <me@rk134.cf>
---
 include/uapi/drm/sde_drm.h                    |  1 +
 .../include/uapi/display/drm/sde_drm.h        |  5 +++
 techpack/display/msm/sde/sde_plane.c          | 37 ++++++++++---------
 3 files changed, 25 insertions(+), 18 deletions(-)
 create mode 120000 include/uapi/drm/sde_drm.h

diff --git a/include/uapi/drm/sde_drm.h b/include/uapi/drm/sde_drm.h
new file mode 120000
index 000000000000..727d02ed94d7
--- /dev/null
+++ b/include/uapi/drm/sde_drm.h
@@ -0,0 +1 @@
+../../../techpack/display/include/uapi/display/drm/sde_drm.h
\ No newline at end of file
diff --git a/techpack/display/include/uapi/display/drm/sde_drm.h b/techpack/display/include/uapi/display/drm/sde_drm.h
index 67fc98b4152c..b97e058e2866 100644
--- a/techpack/display/include/uapi/display/drm/sde_drm.h
+++ b/techpack/display/include/uapi/display/drm/sde_drm.h
@@ -495,6 +495,11 @@ struct sde_drm_roi_v1 {
 #define SDE_RECOVERY_CAPTURE		1
 #define SDE_RECOVERY_HARD_RESET		2
 
+/**
+ * sde fod dim layer
+ */
+#define FOD_PRESSED_LAYER_ZORDER 0x20000000u
+
 /*
  * Colorimetry Data Block values
  * These bit nums are defined as per the CTA spec
diff --git a/techpack/display/msm/sde/sde_plane.c b/techpack/display/msm/sde/sde_plane.c
index 01d290df62d7..0493e78ff8bf 100644
--- a/techpack/display/msm/sde/sde_plane.c
+++ b/techpack/display/msm/sde/sde_plane.c
@@ -3754,7 +3754,7 @@ static void _sde_plane_install_properties(struct drm_plane *plane,
 	struct sde_kms_info *info;
 	struct sde_plane *psde = to_sde_plane(plane);
 	bool is_master;
-	int zpos_max = 255;
+	int zpos_max = INT_MAX;
 	int zpos_def = 0;
 
 	if (!plane || !psde) {
@@ -3778,21 +3778,6 @@ static void _sde_plane_install_properties(struct drm_plane *plane,
 		return;
 	}
 
-	if (sde_is_custom_client()) {
-		if (catalog->mixer_count &&
-				catalog->mixer[0].sblk->maxblendstages) {
-			zpos_max = catalog->mixer[0].sblk->maxblendstages - 1;
-			if (catalog->has_base_layer &&
-					(zpos_max > SDE_STAGE_MAX - 1))
-				zpos_max = SDE_STAGE_MAX - 1;
-			else if (zpos_max > SDE_STAGE_MAX - SDE_STAGE_0 - 1)
-				zpos_max = SDE_STAGE_MAX - SDE_STAGE_0 - 1;
-		}
-	} else if (plane->type != DRM_PLANE_TYPE_PRIMARY) {
-		/* reserve zpos == 0 for primary planes */
-		zpos_def = drm_plane_index(plane) + 1;
-	}
-
 	msm_property_install_range(&psde->property_info, "zpos",
 		0x0, 0, zpos_max, zpos_def, PLANE_PROP_ZPOS);
 
@@ -4077,6 +4062,8 @@ static int sde_plane_atomic_set_property(struct drm_plane *plane,
 {
 	struct sde_plane *psde = plane ? to_sde_plane(plane) : NULL;
 	struct sde_plane_state *pstate;
+	struct drm_property *fod_property;
+	int fod_val = 0;
 	int idx, ret = -EINVAL;
 
 	SDE_DEBUG_PLANE(psde, "\n");
@@ -4087,11 +4074,25 @@ static int sde_plane_atomic_set_property(struct drm_plane *plane,
 		SDE_ERROR_PLANE(psde, "invalid state\n");
 	} else {
 		pstate = to_sde_plane_state(state);
+		idx = msm_property_index(&psde->property_info,
+				property);
+		if (idx == PLANE_PROP_ZPOS) {
+			if (val & FOD_PRESSED_LAYER_ZORDER) {
+				val &= ~FOD_PRESSED_LAYER_ZORDER;
+				fod_val = 2; // pressed
+			}
+
+			fod_property = psde->property_info.
+					property_array[PLANE_PROP_CUSTOM];
+			ret = msm_property_atomic_set(&psde->property_info,
+					&pstate->property_state,
+					fod_property, fod_val);
+			if (ret)
+				SDE_ERROR("failed to set fod prop");
+		}
 		ret = msm_property_atomic_set(&psde->property_info,
 				&pstate->property_state, property, val);
 		if (!ret) {
-			idx = msm_property_index(&psde->property_info,
-					property);
 			switch (idx) {
 			case PLANE_PROP_INPUT_FENCE:
 				_sde_plane_set_input_fence(psde, pstate, val);
-- 
2.40.0

